# - Unlike name/UID, Lables do not provide uniquess, as in generel, we can expect many objects to carry the same label.

# - Once lablels are attached to an object, we would need a filter to narrow down and these are called as label selectors.

# - The api currently supports two types of selectors. Equity based and set based.

# - A label selector can be made of multiple requirements which are comma-seperated.

# - Equality based (=, !=)

#               name: suraj

#               class: nodes

#               Project: Dev

# - Set based: (in, notin and exists)

#               env in (Prod, Dev)

#               env notin (team1, team2)

# - Kubernetes also supports set-based selectors, i.e., match multiple value

# kubectl get pods 'env in (PROD, DEV/TEST, UAT)'

# kubectl get pods -l 'env in ()'


# Node selector -

# ---------------

# - One usecase for selecting labels is to constrain the set of nodes onto which a pod can schedule.

#   i.e you can tell a pod to only be able to run on particuler nodes

# - Generally such constraints are unnessessary, as the scheduler will automatically do reasonable placement, but on certain cirumstances we might need it.

# - We can use labels to tag nodes

# - The nodes are tagged, you can use the label selectors to specify the pods run only of the specific nodes.

# - first we give label to the node.

# - Then use node selector to the pod configuration.

